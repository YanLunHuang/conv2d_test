// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv_2d_cl_me_ap_fixed_ap_fixed_16_14_5_3_0_config2_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        data_0_V_V_dout,
        data_0_V_V_empty_n,
        data_0_V_V_read,
        data_1_V_V_dout,
        data_1_V_V_empty_n,
        data_1_V_V_read,
        data_2_V_V_dout,
        data_2_V_V_empty_n,
        data_2_V_V_read,
        data_3_V_V_dout,
        data_3_V_V_empty_n,
        data_3_V_V_read,
        data_4_V_V_dout,
        data_4_V_V_empty_n,
        data_4_V_V_read,
        data_5_V_V_dout,
        data_5_V_V_empty_n,
        data_5_V_V_read,
        data_6_V_V_dout,
        data_6_V_V_empty_n,
        data_6_V_V_read,
        data_7_V_V_dout,
        data_7_V_V_empty_n,
        data_7_V_V_read,
        res_0_V_V_TDATA,
        res_0_V_V_TVALID,
        res_0_V_V_TREADY,
        res_1_V_V_TDATA,
        res_1_V_V_TVALID,
        res_1_V_V_TREADY,
        res_2_V_V_TDATA,
        res_2_V_V_TVALID,
        res_2_V_V_TREADY,
        res_3_V_V_TDATA,
        res_3_V_V_TVALID,
        res_3_V_V_TREADY,
        res_4_V_V_TDATA,
        res_4_V_V_TVALID,
        res_4_V_V_TREADY,
        res_5_V_V_TDATA,
        res_5_V_V_TVALID,
        res_5_V_V_TREADY,
        res_6_V_V_TDATA,
        res_6_V_V_TVALID,
        res_6_V_V_TREADY,
        res_7_V_V_TDATA,
        res_7_V_V_TVALID,
        res_7_V_V_TREADY
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_pp0_stage0 = 7'd8;
parameter    ap_ST_fsm_state7 = 7'd16;
parameter    ap_ST_fsm_state8 = 7'd32;
parameter    ap_ST_fsm_state9 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] data_0_V_V_dout;
input   data_0_V_V_empty_n;
output   data_0_V_V_read;
input  [15:0] data_1_V_V_dout;
input   data_1_V_V_empty_n;
output   data_1_V_V_read;
input  [15:0] data_2_V_V_dout;
input   data_2_V_V_empty_n;
output   data_2_V_V_read;
input  [15:0] data_3_V_V_dout;
input   data_3_V_V_empty_n;
output   data_3_V_V_read;
input  [15:0] data_4_V_V_dout;
input   data_4_V_V_empty_n;
output   data_4_V_V_read;
input  [15:0] data_5_V_V_dout;
input   data_5_V_V_empty_n;
output   data_5_V_V_read;
input  [15:0] data_6_V_V_dout;
input   data_6_V_V_empty_n;
output   data_6_V_V_read;
input  [15:0] data_7_V_V_dout;
input   data_7_V_V_empty_n;
output   data_7_V_V_read;
output  [15:0] res_0_V_V_TDATA;
output   res_0_V_V_TVALID;
input   res_0_V_V_TREADY;
output  [15:0] res_1_V_V_TDATA;
output   res_1_V_V_TVALID;
input   res_1_V_V_TREADY;
output  [15:0] res_2_V_V_TDATA;
output   res_2_V_V_TVALID;
input   res_2_V_V_TREADY;
output  [15:0] res_3_V_V_TDATA;
output   res_3_V_V_TVALID;
input   res_3_V_V_TREADY;
output  [15:0] res_4_V_V_TDATA;
output   res_4_V_V_TVALID;
input   res_4_V_V_TREADY;
output  [15:0] res_5_V_V_TDATA;
output   res_5_V_V_TVALID;
input   res_5_V_V_TREADY;
output  [15:0] res_6_V_V_TDATA;
output   res_6_V_V_TVALID;
input   res_6_V_V_TREADY;
output  [15:0] res_7_V_V_TDATA;
output   res_7_V_V_TVALID;
input   res_7_V_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_0_V_V_read;
reg data_1_V_V_read;
reg data_2_V_V_read;
reg data_3_V_V_read;
reg data_4_V_V_read;
reg data_5_V_V_read;
reg data_6_V_V_read;
reg data_7_V_V_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [1151:0] layer_in_V;
reg   [31:0] sX;
reg   [31:0] sY;
reg   [31:0] pY;
reg   [31:0] pX;
wire   [6:0] w2_V_address0;
reg    w2_V_ce0;
wire   [114:0] w2_V_q0;
reg    data_0_V_V_blk_n;
wire    ap_CS_fsm_state3;
reg    data_1_V_V_blk_n;
reg    data_2_V_V_blk_n;
reg    data_3_V_V_blk_n;
reg    data_4_V_V_blk_n;
reg    data_5_V_V_blk_n;
reg    data_6_V_V_blk_n;
reg    data_7_V_V_blk_n;
reg    res_0_V_V_TDATA_blk_n;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
reg   [0:0] and_ln176_2_reg_1234;
reg    res_1_V_V_TDATA_blk_n;
reg    res_2_V_V_TDATA_blk_n;
reg    res_3_V_V_TDATA_blk_n;
reg    res_4_V_V_TDATA_blk_n;
reg    res_5_V_V_TDATA_blk_n;
reg    res_6_V_V_TDATA_blk_n;
reg    res_7_V_V_TDATA_blk_n;
reg   [15:0] tmp_V_22_reg_436;
reg   [15:0] tmp_V_21_reg_449;
reg   [15:0] tmp_V_20_reg_462;
reg   [15:0] tmp_V_19_reg_475;
reg   [15:0] tmp_V_18_reg_488;
reg   [15:0] tmp_V_17_reg_501;
reg   [15:0] tmp_V_16_reg_514;
reg   [15:0] tmp_V_15_reg_527;
reg   [6:0] in_index_reg_540;
reg    ap_block_state1;
wire   [4:0] i_fu_696_p2;
reg   [4:0] i_reg_1212;
wire    ap_CS_fsm_state2;
wire    regslice_both_res_0_V_V_U_apdone_blk;
wire    regslice_both_res_1_V_V_U_apdone_blk;
wire    regslice_both_res_2_V_V_U_apdone_blk;
wire    regslice_both_res_3_V_V_U_apdone_blk;
wire    regslice_both_res_4_V_V_U_apdone_blk;
wire    regslice_both_res_5_V_V_U_apdone_blk;
wire    regslice_both_res_6_V_V_U_apdone_blk;
wire    regslice_both_res_7_V_V_U_apdone_blk;
reg    ap_block_state2;
wire   [1151:0] call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_551_ap_return;
reg   [1151:0] call_ret_reg_1217;
reg    ap_block_state3;
wire   [0:0] icmp_ln176_fu_729_p2;
reg   [0:0] icmp_ln176_reg_1224;
wire   [0:0] icmp_ln176_1_fu_735_p2;
reg   [0:0] icmp_ln176_1_reg_1229;
wire   [0:0] and_ln176_2_fu_785_p2;
wire   [0:0] icmp_ln74_fu_791_p2;
reg   [0:0] icmp_ln74_reg_1238;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state6_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln74_reg_1238_pp0_iter1_reg;
wire   [6:0] ir_fu_797_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [15:0] trunc_ln83_fu_905_p1;
reg   [15:0] trunc_ln83_reg_1247;
wire   [15:0] tmpmult_0_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_590_ap_return;
reg   [15:0] tmpmult_0_V_reg_1264;
wire   [15:0] tmpmult_1_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_596_ap_return;
reg   [15:0] tmpmult_1_V_reg_1269;
wire   [15:0] tmpmult_2_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_602_ap_return;
reg   [15:0] tmpmult_2_V_reg_1274;
wire   [15:0] tmpmult_3_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_608_ap_return;
reg   [15:0] tmpmult_3_V_reg_1279;
wire   [15:0] tmpmult_4_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_614_ap_return;
reg   [15:0] tmpmult_4_V_reg_1284;
wire   [15:0] tmpmult_5_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_620_ap_return;
reg   [15:0] tmpmult_5_V_reg_1289;
wire   [15:0] tmpmult_6_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_626_ap_return;
reg   [15:0] tmpmult_6_V_reg_1294;
wire   [15:0] op_V_assign_2_0_7_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_632_ap_return;
reg   [15:0] op_V_assign_2_0_7_reg_1299;
wire   [15:0] acc_0_V_fu_1000_p2;
reg    ap_enable_reg_pp0_iter2;
wire   [15:0] acc_1_V_fu_1005_p2;
wire   [15:0] acc_2_V_fu_1010_p2;
wire   [15:0] acc_3_V_fu_1015_p2;
wire   [15:0] acc_4_V_fu_1020_p2;
wire   [15:0] acc_5_V_fu_1025_p2;
wire   [15:0] acc_6_V_fu_1030_p2;
wire   [15:0] acc_7_V_fu_1035_p2;
wire   [0:0] icmp_ln198_fu_1040_p2;
reg   [0:0] icmp_ln198_reg_1344;
reg    ap_block_state8_io;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg    ap_enable_reg_pp0_iter1;
reg    call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_551_ap_start;
wire    call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_551_ap_done;
wire    call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_551_ap_idle;
wire    call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_551_ap_ready;
wire   [127:0] call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_551_data_V_read;
wire    tmpmult_0_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_590_ap_ready;
wire   [15:0] tmpmult_0_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_590_w_V;
wire    tmpmult_1_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_596_ap_ready;
wire   [15:0] tmpmult_1_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_596_w_V;
wire    tmpmult_2_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_602_ap_ready;
wire   [15:0] tmpmult_2_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_602_w_V;
wire    tmpmult_3_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_608_ap_ready;
wire   [15:0] tmpmult_3_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_608_w_V;
wire    tmpmult_4_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_614_ap_ready;
wire   [15:0] tmpmult_4_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_614_w_V;
wire    tmpmult_5_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_620_ap_ready;
wire   [15:0] tmpmult_5_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_620_w_V;
wire    tmpmult_6_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_626_ap_ready;
wire   [15:0] tmpmult_6_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_626_w_V;
wire    op_V_assign_2_0_7_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_632_ap_ready;
wire   [15:0] op_V_assign_2_0_7_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_632_w_V;
reg   [1151:0] layer_in_V_loc_0_reg_415;
wire    ap_CS_fsm_state9;
reg   [4:0] i_0_i_reg_425;
reg    ap_block_state3_ignore_call13;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln83_fu_909_p1;
wire   [31:0] select_ln213_fu_1064_p3;
wire   [31:0] add_ln206_fu_1105_p2;
wire   [0:0] icmp_ln202_fu_1099_p2;
wire   [31:0] add_ln211_fu_1046_p2;
reg   [31:0] pX_loc_0_fu_282;
reg   [31:0] sX_loc_0_fu_286;
reg   [31:0] pY_loc_0_fu_290;
reg   [31:0] sY_loc_0_fu_294;
wire   [31:0] select_ln208_fu_1123_p3;
reg    ap_block_state7_io;
wire   [30:0] tmp_3_fu_741_p4;
wire   [30:0] tmp_4_fu_757_p4;
wire   [0:0] icmp_ln176_2_fu_751_p2;
wire   [0:0] icmp_ln176_3_fu_767_p2;
wire   [0:0] and_ln176_1_fu_779_p2;
wire   [0:0] and_ln176_fu_773_p2;
wire   [10:0] tmp_1_fu_803_p3;
wire   [10:0] empty_28_fu_811_p2;
wire   [0:0] icmp_ln83_fu_817_p2;
wire   [10:0] sub_ln83_fu_832_p2;
wire   [10:0] sub_ln83_2_fu_844_p2;
reg   [1151:0] tmp_10_fu_823_p4;
wire   [10:0] sub_ln83_1_fu_838_p2;
wire   [10:0] select_ln83_fu_850_p3;
wire   [10:0] select_ln83_2_fu_865_p3;
wire   [10:0] sub_ln83_3_fu_873_p2;
wire   [1151:0] select_ln83_1_fu_858_p3;
wire   [1151:0] zext_ln83_2_fu_879_p1;
wire   [1151:0] zext_ln83_3_fu_883_p1;
wire   [1151:0] lshr_ln83_fu_887_p2;
wire   [1151:0] lshr_ln83_1_fu_893_p2;
wire   [1151:0] and_ln83_fu_899_p2;
wire   [2:0] tmp_2_fu_985_p4;
wire   [31:0] add_ln213_fu_1058_p2;
wire   [31:0] add_ln208_fu_1117_p2;
wire   [0:0] icmp_ln167_fu_690_p2;
reg   [6:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    res_0_V_V_TVALID_int;
wire    res_0_V_V_TREADY_int;
wire    regslice_both_res_0_V_V_U_vld_out;
reg    res_1_V_V_TVALID_int;
wire    res_1_V_V_TREADY_int;
wire    regslice_both_res_1_V_V_U_vld_out;
reg    res_2_V_V_TVALID_int;
wire    res_2_V_V_TREADY_int;
wire    regslice_both_res_2_V_V_U_vld_out;
reg    res_3_V_V_TVALID_int;
wire    res_3_V_V_TREADY_int;
wire    regslice_both_res_3_V_V_U_vld_out;
reg    res_4_V_V_TVALID_int;
wire    res_4_V_V_TREADY_int;
wire    regslice_both_res_4_V_V_U_vld_out;
reg    res_5_V_V_TVALID_int;
wire    res_5_V_V_TREADY_int;
wire    regslice_both_res_5_V_V_U_vld_out;
reg    res_6_V_V_TVALID_int;
wire    res_6_V_V_TREADY_int;
wire    regslice_both_res_6_V_V_U_vld_out;
reg    res_7_V_V_TVALID_int;
wire    res_7_V_V_TREADY_int;
wire    regslice_both_res_7_V_V_U_vld_out;
reg    ap_condition_418;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 7'd1;
#0 layer_in_V = 1152'd0;
#0 sX = 32'd0;
#0 sY = 32'd0;
#0 pY = 32'd0;
#0 pX = 32'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

conv_2d_cl_me_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_w2_V #(
    .DataWidth( 115 ),
    .AddressRange( 72 ),
    .AddressWidth( 7 ))
w2_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w2_V_address0),
    .ce0(w2_V_ce0),
    .q0(w2_V_q0)
);

cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_551(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_551_ap_start),
    .ap_done(call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_551_ap_done),
    .ap_idle(call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_551_ap_idle),
    .ap_ready(call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_551_ap_ready),
    .data_V_read(call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_551_data_V_read),
    .output_V_read(layer_in_V_loc_0_reg_415),
    .ap_return(call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_551_ap_return)
);

product_dense_ap_fixed_ap_fixed_ap_fixed_s tmpmult_0_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_590(
    .ap_ready(tmpmult_0_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_590_ap_ready),
    .a_V(trunc_ln83_reg_1247),
    .w_V(tmpmult_0_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_590_w_V),
    .ap_return(tmpmult_0_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_590_ap_return)
);

product_dense_ap_fixed_ap_fixed_ap_fixed_s tmpmult_1_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_596(
    .ap_ready(tmpmult_1_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_596_ap_ready),
    .a_V(trunc_ln83_reg_1247),
    .w_V(tmpmult_1_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_596_w_V),
    .ap_return(tmpmult_1_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_596_ap_return)
);

product_dense_ap_fixed_ap_fixed_ap_fixed_s tmpmult_2_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_602(
    .ap_ready(tmpmult_2_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_602_ap_ready),
    .a_V(trunc_ln83_reg_1247),
    .w_V(tmpmult_2_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_602_w_V),
    .ap_return(tmpmult_2_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_602_ap_return)
);

product_dense_ap_fixed_ap_fixed_ap_fixed_s tmpmult_3_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_608(
    .ap_ready(tmpmult_3_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_608_ap_ready),
    .a_V(trunc_ln83_reg_1247),
    .w_V(tmpmult_3_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_608_w_V),
    .ap_return(tmpmult_3_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_608_ap_return)
);

product_dense_ap_fixed_ap_fixed_ap_fixed_s tmpmult_4_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_614(
    .ap_ready(tmpmult_4_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_614_ap_ready),
    .a_V(trunc_ln83_reg_1247),
    .w_V(tmpmult_4_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_614_w_V),
    .ap_return(tmpmult_4_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_614_ap_return)
);

product_dense_ap_fixed_ap_fixed_ap_fixed_s tmpmult_5_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_620(
    .ap_ready(tmpmult_5_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_620_ap_ready),
    .a_V(trunc_ln83_reg_1247),
    .w_V(tmpmult_5_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_620_w_V),
    .ap_return(tmpmult_5_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_620_ap_return)
);

product_dense_ap_fixed_ap_fixed_ap_fixed_s tmpmult_6_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_626(
    .ap_ready(tmpmult_6_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_626_ap_ready),
    .a_V(trunc_ln83_reg_1247),
    .w_V(tmpmult_6_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_626_w_V),
    .ap_return(tmpmult_6_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_626_ap_return)
);

product_dense_ap_fixed_ap_fixed_ap_fixed_s op_V_assign_2_0_7_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_632(
    .ap_ready(op_V_assign_2_0_7_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_632_ap_ready),
    .a_V(trunc_ln83_reg_1247),
    .w_V(op_V_assign_2_0_7_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_632_w_V),
    .ap_return(op_V_assign_2_0_7_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_632_ap_return)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_0_V_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(tmp_V_15_reg_527),
    .vld_in(res_0_V_V_TVALID_int),
    .ack_in(res_0_V_V_TREADY_int),
    .data_out(res_0_V_V_TDATA),
    .vld_out(regslice_both_res_0_V_V_U_vld_out),
    .ack_out(res_0_V_V_TREADY),
    .apdone_blk(regslice_both_res_0_V_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_1_V_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(tmp_V_16_reg_514),
    .vld_in(res_1_V_V_TVALID_int),
    .ack_in(res_1_V_V_TREADY_int),
    .data_out(res_1_V_V_TDATA),
    .vld_out(regslice_both_res_1_V_V_U_vld_out),
    .ack_out(res_1_V_V_TREADY),
    .apdone_blk(regslice_both_res_1_V_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_2_V_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(tmp_V_17_reg_501),
    .vld_in(res_2_V_V_TVALID_int),
    .ack_in(res_2_V_V_TREADY_int),
    .data_out(res_2_V_V_TDATA),
    .vld_out(regslice_both_res_2_V_V_U_vld_out),
    .ack_out(res_2_V_V_TREADY),
    .apdone_blk(regslice_both_res_2_V_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_3_V_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(tmp_V_18_reg_488),
    .vld_in(res_3_V_V_TVALID_int),
    .ack_in(res_3_V_V_TREADY_int),
    .data_out(res_3_V_V_TDATA),
    .vld_out(regslice_both_res_3_V_V_U_vld_out),
    .ack_out(res_3_V_V_TREADY),
    .apdone_blk(regslice_both_res_3_V_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_4_V_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(tmp_V_19_reg_475),
    .vld_in(res_4_V_V_TVALID_int),
    .ack_in(res_4_V_V_TREADY_int),
    .data_out(res_4_V_V_TDATA),
    .vld_out(regslice_both_res_4_V_V_U_vld_out),
    .ack_out(res_4_V_V_TREADY),
    .apdone_blk(regslice_both_res_4_V_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_5_V_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(tmp_V_20_reg_462),
    .vld_in(res_5_V_V_TVALID_int),
    .ack_in(res_5_V_V_TREADY_int),
    .data_out(res_5_V_V_TDATA),
    .vld_out(regslice_both_res_5_V_V_U_vld_out),
    .ack_out(res_5_V_V_TREADY),
    .apdone_blk(regslice_both_res_5_V_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_6_V_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(tmp_V_21_reg_449),
    .vld_in(res_6_V_V_TVALID_int),
    .ack_in(res_6_V_V_TREADY_int),
    .data_out(res_6_V_V_TDATA),
    .vld_out(regslice_both_res_6_V_V_U_vld_out),
    .ack_out(res_6_V_V_TREADY),
    .apdone_blk(regslice_both_res_6_V_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_7_V_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(tmp_V_22_reg_436),
    .vld_in(res_7_V_V_TVALID_int),
    .ack_in(res_7_V_V_TREADY_int),
    .data_out(res_7_V_V_TDATA),
    .vld_out(regslice_both_res_7_V_V_U_vld_out),
    .ack_out(res_7_V_V_TREADY),
    .apdone_blk(regslice_both_res_7_V_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((regslice_both_res_7_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_6_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_5_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_4_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_3_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_2_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_1_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_0_V_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln167_fu_690_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((data_7_V_V_empty_n == 1'b0) | (data_6_V_V_empty_n == 1'b0) | (data_5_V_V_empty_n == 1'b0) | (data_4_V_V_empty_n == 1'b0) | (data_3_V_V_empty_n == 1'b0) | (data_2_V_V_empty_n == 1'b0) | (data_1_V_V_empty_n == 1'b0) | (data_0_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3) & (1'd1 == and_ln176_2_fu_785_p2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state4)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state4);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((data_7_V_V_empty_n == 1'b0) | (data_6_V_V_empty_n == 1'b0) | (data_5_V_V_empty_n == 1'b0) | (data_4_V_V_empty_n == 1'b0) | (data_3_V_V_empty_n == 1'b0) | (data_2_V_V_empty_n == 1'b0) | (data_1_V_V_empty_n == 1'b0) | (data_0_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3) & (1'd1 == and_ln176_2_fu_785_p2))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i_0_i_reg_425 <= i_reg_1212;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_i_reg_425 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln74_fu_791_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_index_reg_540 <= ir_fu_797_p2;
    end else if ((~((data_7_V_V_empty_n == 1'b0) | (data_6_V_V_empty_n == 1'b0) | (data_5_V_V_empty_n == 1'b0) | (data_4_V_V_empty_n == 1'b0) | (data_3_V_V_empty_n == 1'b0) | (data_2_V_V_empty_n == 1'b0) | (data_1_V_V_empty_n == 1'b0) | (data_0_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3) & (1'd1 == and_ln176_2_fu_785_p2))) begin
        in_index_reg_540 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        layer_in_V_loc_0_reg_415 <= call_ret_reg_1217;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer_in_V_loc_0_reg_415 <= layer_in_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state8_io) & (1'b1 == ap_CS_fsm_state8))) begin
        if ((icmp_ln198_fu_1040_p2 == 1'd1)) begin
            pX <= 32'd0;
        end else if ((icmp_ln198_fu_1040_p2 == 1'd0)) begin
            pX <= add_ln211_fu_1046_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln198_reg_1344 == 1'd1))) begin
        pX_loc_0_fu_282 <= 32'd0;
    end else if (((1'b0 == ap_block_state8_io) & (icmp_ln198_fu_1040_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        pX_loc_0_fu_282 <= add_ln211_fu_1046_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        pX_loc_0_fu_282 <= pX;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_418)) begin
        if ((icmp_ln202_fu_1099_p2 == 1'd1)) begin
            pY <= 32'd0;
        end else if ((icmp_ln202_fu_1099_p2 == 1'd0)) begin
            pY <= add_ln206_fu_1105_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state8_io) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln202_fu_1099_p2 == 1'd1) & (icmp_ln198_fu_1040_p2 == 1'd1))) begin
        pY_loc_0_fu_290 <= 32'd0;
    end else if (((1'b0 == ap_block_state8_io) & (icmp_ln202_fu_1099_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln198_fu_1040_p2 == 1'd1))) begin
        pY_loc_0_fu_290 <= add_ln206_fu_1105_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        pY_loc_0_fu_290 <= pY;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state8_io) & (1'b1 == ap_CS_fsm_state8))) begin
        if ((icmp_ln198_fu_1040_p2 == 1'd1)) begin
            sX <= 32'd0;
        end else if ((icmp_ln198_fu_1040_p2 == 1'd0)) begin
            sX <= select_ln213_fu_1064_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln198_reg_1344 == 1'd1))) begin
        sX_loc_0_fu_286 <= 32'd0;
    end else if (((1'b0 == ap_block_state8_io) & (icmp_ln198_fu_1040_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        sX_loc_0_fu_286 <= select_ln213_fu_1064_p3;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sX_loc_0_fu_286 <= sX;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state8_io) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln202_fu_1099_p2 == 1'd1) & (icmp_ln198_fu_1040_p2 == 1'd1))) begin
        sY_loc_0_fu_294 <= 32'd0;
    end else if (((1'b0 == ap_block_state8_io) & (icmp_ln202_fu_1099_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln198_fu_1040_p2 == 1'd1))) begin
        sY_loc_0_fu_294 <= select_ln208_fu_1123_p3;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        sY_loc_0_fu_294 <= sY;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln74_reg_1238_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        tmp_V_15_reg_527 <= acc_0_V_fu_1000_p2;
    end else if ((~((data_7_V_V_empty_n == 1'b0) | (data_6_V_V_empty_n == 1'b0) | (data_5_V_V_empty_n == 1'b0) | (data_4_V_V_empty_n == 1'b0) | (data_3_V_V_empty_n == 1'b0) | (data_2_V_V_empty_n == 1'b0) | (data_1_V_V_empty_n == 1'b0) | (data_0_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3) & (1'd1 == and_ln176_2_fu_785_p2))) begin
        tmp_V_15_reg_527 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln74_reg_1238_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        tmp_V_16_reg_514 <= acc_1_V_fu_1005_p2;
    end else if ((~((data_7_V_V_empty_n == 1'b0) | (data_6_V_V_empty_n == 1'b0) | (data_5_V_V_empty_n == 1'b0) | (data_4_V_V_empty_n == 1'b0) | (data_3_V_V_empty_n == 1'b0) | (data_2_V_V_empty_n == 1'b0) | (data_1_V_V_empty_n == 1'b0) | (data_0_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3) & (1'd1 == and_ln176_2_fu_785_p2))) begin
        tmp_V_16_reg_514 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln74_reg_1238_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        tmp_V_17_reg_501 <= acc_2_V_fu_1010_p2;
    end else if ((~((data_7_V_V_empty_n == 1'b0) | (data_6_V_V_empty_n == 1'b0) | (data_5_V_V_empty_n == 1'b0) | (data_4_V_V_empty_n == 1'b0) | (data_3_V_V_empty_n == 1'b0) | (data_2_V_V_empty_n == 1'b0) | (data_1_V_V_empty_n == 1'b0) | (data_0_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3) & (1'd1 == and_ln176_2_fu_785_p2))) begin
        tmp_V_17_reg_501 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln74_reg_1238_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        tmp_V_18_reg_488 <= acc_3_V_fu_1015_p2;
    end else if ((~((data_7_V_V_empty_n == 1'b0) | (data_6_V_V_empty_n == 1'b0) | (data_5_V_V_empty_n == 1'b0) | (data_4_V_V_empty_n == 1'b0) | (data_3_V_V_empty_n == 1'b0) | (data_2_V_V_empty_n == 1'b0) | (data_1_V_V_empty_n == 1'b0) | (data_0_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3) & (1'd1 == and_ln176_2_fu_785_p2))) begin
        tmp_V_18_reg_488 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln74_reg_1238_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        tmp_V_19_reg_475 <= acc_4_V_fu_1020_p2;
    end else if ((~((data_7_V_V_empty_n == 1'b0) | (data_6_V_V_empty_n == 1'b0) | (data_5_V_V_empty_n == 1'b0) | (data_4_V_V_empty_n == 1'b0) | (data_3_V_V_empty_n == 1'b0) | (data_2_V_V_empty_n == 1'b0) | (data_1_V_V_empty_n == 1'b0) | (data_0_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3) & (1'd1 == and_ln176_2_fu_785_p2))) begin
        tmp_V_19_reg_475 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln74_reg_1238_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        tmp_V_20_reg_462 <= acc_5_V_fu_1025_p2;
    end else if ((~((data_7_V_V_empty_n == 1'b0) | (data_6_V_V_empty_n == 1'b0) | (data_5_V_V_empty_n == 1'b0) | (data_4_V_V_empty_n == 1'b0) | (data_3_V_V_empty_n == 1'b0) | (data_2_V_V_empty_n == 1'b0) | (data_1_V_V_empty_n == 1'b0) | (data_0_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3) & (1'd1 == and_ln176_2_fu_785_p2))) begin
        tmp_V_20_reg_462 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln74_reg_1238_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        tmp_V_21_reg_449 <= acc_6_V_fu_1030_p2;
    end else if ((~((data_7_V_V_empty_n == 1'b0) | (data_6_V_V_empty_n == 1'b0) | (data_5_V_V_empty_n == 1'b0) | (data_4_V_V_empty_n == 1'b0) | (data_3_V_V_empty_n == 1'b0) | (data_2_V_V_empty_n == 1'b0) | (data_1_V_V_empty_n == 1'b0) | (data_0_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3) & (1'd1 == and_ln176_2_fu_785_p2))) begin
        tmp_V_21_reg_449 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln74_reg_1238_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        tmp_V_22_reg_436 <= acc_7_V_fu_1035_p2;
    end else if ((~((data_7_V_V_empty_n == 1'b0) | (data_6_V_V_empty_n == 1'b0) | (data_5_V_V_empty_n == 1'b0) | (data_4_V_V_empty_n == 1'b0) | (data_3_V_V_empty_n == 1'b0) | (data_2_V_V_empty_n == 1'b0) | (data_1_V_V_empty_n == 1'b0) | (data_0_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3) & (1'd1 == and_ln176_2_fu_785_p2))) begin
        tmp_V_22_reg_436 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((data_7_V_V_empty_n == 1'b0) | (data_6_V_V_empty_n == 1'b0) | (data_5_V_V_empty_n == 1'b0) | (data_4_V_V_empty_n == 1'b0) | (data_3_V_V_empty_n == 1'b0) | (data_2_V_V_empty_n == 1'b0) | (data_1_V_V_empty_n == 1'b0) | (data_0_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        and_ln176_2_reg_1234 <= and_ln176_2_fu_785_p2;
        call_ret_reg_1217 <= call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_551_ap_return;
        icmp_ln176_1_reg_1229 <= icmp_ln176_1_fu_735_p2;
        icmp_ln176_reg_1224 <= icmp_ln176_fu_729_p2;
        layer_in_V <= call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_551_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((~((regslice_both_res_7_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_6_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_5_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_4_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_3_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_2_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_1_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_0_V_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_1212 <= i_fu_696_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state8_io) & (1'b1 == ap_CS_fsm_state8))) begin
        icmp_ln198_reg_1344 <= icmp_ln198_fu_1040_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln74_reg_1238 <= icmp_ln74_fu_791_p2;
        icmp_ln74_reg_1238_pp0_iter1_reg <= icmp_ln74_reg_1238;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln74_reg_1238 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        op_V_assign_2_0_7_reg_1299 <= op_V_assign_2_0_7_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_632_ap_return;
        tmpmult_0_V_reg_1264 <= tmpmult_0_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_590_ap_return;
        tmpmult_1_V_reg_1269 <= tmpmult_1_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_596_ap_return;
        tmpmult_2_V_reg_1274 <= tmpmult_2_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_602_ap_return;
        tmpmult_3_V_reg_1279 <= tmpmult_3_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_608_ap_return;
        tmpmult_4_V_reg_1284 <= tmpmult_4_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_614_ap_return;
        tmpmult_5_V_reg_1289 <= tmpmult_5_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_620_ap_return;
        tmpmult_6_V_reg_1294 <= tmpmult_6_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_626_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln198_reg_1344 == 1'd1))) begin
        sY <= sY_loc_0_fu_294;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln74_fu_791_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln83_reg_1247 <= trunc_ln83_fu_905_p1;
    end
end

always @ (*) begin
    if ((icmp_ln74_fu_791_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((~((regslice_both_res_7_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_6_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_5_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_4_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_3_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_2_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_1_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_0_V_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln167_fu_690_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((regslice_both_res_7_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_6_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_5_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_4_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_3_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_2_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_1_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_0_V_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln167_fu_690_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((data_7_V_V_empty_n == 1'b0) | (data_6_V_V_empty_n == 1'b0) | (data_5_V_V_empty_n == 1'b0) | (data_4_V_V_empty_n == 1'b0) | (data_3_V_V_empty_n == 1'b0) | (data_2_V_V_empty_n == 1'b0) | (data_1_V_V_empty_n == 1'b0) | (data_0_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_551_ap_start = 1'b1;
    end else begin
        call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_551_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_0_V_V_blk_n = data_0_V_V_empty_n;
    end else begin
        data_0_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((data_7_V_V_empty_n == 1'b0) | (data_6_V_V_empty_n == 1'b0) | (data_5_V_V_empty_n == 1'b0) | (data_4_V_V_empty_n == 1'b0) | (data_3_V_V_empty_n == 1'b0) | (data_2_V_V_empty_n == 1'b0) | (data_1_V_V_empty_n == 1'b0) | (data_0_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        data_0_V_V_read = 1'b1;
    end else begin
        data_0_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_1_V_V_blk_n = data_1_V_V_empty_n;
    end else begin
        data_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((data_7_V_V_empty_n == 1'b0) | (data_6_V_V_empty_n == 1'b0) | (data_5_V_V_empty_n == 1'b0) | (data_4_V_V_empty_n == 1'b0) | (data_3_V_V_empty_n == 1'b0) | (data_2_V_V_empty_n == 1'b0) | (data_1_V_V_empty_n == 1'b0) | (data_0_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        data_1_V_V_read = 1'b1;
    end else begin
        data_1_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_2_V_V_blk_n = data_2_V_V_empty_n;
    end else begin
        data_2_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((data_7_V_V_empty_n == 1'b0) | (data_6_V_V_empty_n == 1'b0) | (data_5_V_V_empty_n == 1'b0) | (data_4_V_V_empty_n == 1'b0) | (data_3_V_V_empty_n == 1'b0) | (data_2_V_V_empty_n == 1'b0) | (data_1_V_V_empty_n == 1'b0) | (data_0_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        data_2_V_V_read = 1'b1;
    end else begin
        data_2_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_3_V_V_blk_n = data_3_V_V_empty_n;
    end else begin
        data_3_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((data_7_V_V_empty_n == 1'b0) | (data_6_V_V_empty_n == 1'b0) | (data_5_V_V_empty_n == 1'b0) | (data_4_V_V_empty_n == 1'b0) | (data_3_V_V_empty_n == 1'b0) | (data_2_V_V_empty_n == 1'b0) | (data_1_V_V_empty_n == 1'b0) | (data_0_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        data_3_V_V_read = 1'b1;
    end else begin
        data_3_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_4_V_V_blk_n = data_4_V_V_empty_n;
    end else begin
        data_4_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((data_7_V_V_empty_n == 1'b0) | (data_6_V_V_empty_n == 1'b0) | (data_5_V_V_empty_n == 1'b0) | (data_4_V_V_empty_n == 1'b0) | (data_3_V_V_empty_n == 1'b0) | (data_2_V_V_empty_n == 1'b0) | (data_1_V_V_empty_n == 1'b0) | (data_0_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        data_4_V_V_read = 1'b1;
    end else begin
        data_4_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_5_V_V_blk_n = data_5_V_V_empty_n;
    end else begin
        data_5_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((data_7_V_V_empty_n == 1'b0) | (data_6_V_V_empty_n == 1'b0) | (data_5_V_V_empty_n == 1'b0) | (data_4_V_V_empty_n == 1'b0) | (data_3_V_V_empty_n == 1'b0) | (data_2_V_V_empty_n == 1'b0) | (data_1_V_V_empty_n == 1'b0) | (data_0_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        data_5_V_V_read = 1'b1;
    end else begin
        data_5_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_6_V_V_blk_n = data_6_V_V_empty_n;
    end else begin
        data_6_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((data_7_V_V_empty_n == 1'b0) | (data_6_V_V_empty_n == 1'b0) | (data_5_V_V_empty_n == 1'b0) | (data_4_V_V_empty_n == 1'b0) | (data_3_V_V_empty_n == 1'b0) | (data_2_V_V_empty_n == 1'b0) | (data_1_V_V_empty_n == 1'b0) | (data_0_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        data_6_V_V_read = 1'b1;
    end else begin
        data_6_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        data_7_V_V_blk_n = data_7_V_V_empty_n;
    end else begin
        data_7_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((data_7_V_V_empty_n == 1'b0) | (data_6_V_V_empty_n == 1'b0) | (data_5_V_V_empty_n == 1'b0) | (data_4_V_V_empty_n == 1'b0) | (data_3_V_V_empty_n == 1'b0) | (data_2_V_V_empty_n == 1'b0) | (data_1_V_V_empty_n == 1'b0) | (data_0_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        data_7_V_V_read = 1'b1;
    end else begin
        data_7_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state8) & (1'd1 == and_ln176_2_reg_1234)))) begin
        res_0_V_V_TDATA_blk_n = res_0_V_V_TREADY_int;
    end else begin
        res_0_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state7_io) & (1'b1 == ap_CS_fsm_state7))) begin
        res_0_V_V_TVALID_int = 1'b1;
    end else begin
        res_0_V_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state8) & (1'd1 == and_ln176_2_reg_1234)))) begin
        res_1_V_V_TDATA_blk_n = res_1_V_V_TREADY_int;
    end else begin
        res_1_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state7_io) & (1'b1 == ap_CS_fsm_state7))) begin
        res_1_V_V_TVALID_int = 1'b1;
    end else begin
        res_1_V_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state8) & (1'd1 == and_ln176_2_reg_1234)))) begin
        res_2_V_V_TDATA_blk_n = res_2_V_V_TREADY_int;
    end else begin
        res_2_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state7_io) & (1'b1 == ap_CS_fsm_state7))) begin
        res_2_V_V_TVALID_int = 1'b1;
    end else begin
        res_2_V_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state8) & (1'd1 == and_ln176_2_reg_1234)))) begin
        res_3_V_V_TDATA_blk_n = res_3_V_V_TREADY_int;
    end else begin
        res_3_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state7_io) & (1'b1 == ap_CS_fsm_state7))) begin
        res_3_V_V_TVALID_int = 1'b1;
    end else begin
        res_3_V_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state8) & (1'd1 == and_ln176_2_reg_1234)))) begin
        res_4_V_V_TDATA_blk_n = res_4_V_V_TREADY_int;
    end else begin
        res_4_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state7_io) & (1'b1 == ap_CS_fsm_state7))) begin
        res_4_V_V_TVALID_int = 1'b1;
    end else begin
        res_4_V_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state8) & (1'd1 == and_ln176_2_reg_1234)))) begin
        res_5_V_V_TDATA_blk_n = res_5_V_V_TREADY_int;
    end else begin
        res_5_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state7_io) & (1'b1 == ap_CS_fsm_state7))) begin
        res_5_V_V_TVALID_int = 1'b1;
    end else begin
        res_5_V_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state8) & (1'd1 == and_ln176_2_reg_1234)))) begin
        res_6_V_V_TDATA_blk_n = res_6_V_V_TREADY_int;
    end else begin
        res_6_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state7_io) & (1'b1 == ap_CS_fsm_state7))) begin
        res_6_V_V_TVALID_int = 1'b1;
    end else begin
        res_6_V_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'b1 == ap_CS_fsm_state8) & (1'd1 == and_ln176_2_reg_1234)))) begin
        res_7_V_V_TDATA_blk_n = res_7_V_V_TREADY_int;
    end else begin
        res_7_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state7_io) & (1'b1 == ap_CS_fsm_state7))) begin
        res_7_V_V_TVALID_int = 1'b1;
    end else begin
        res_7_V_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        w2_V_ce0 = 1'b1;
    end else begin
        w2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((regslice_both_res_7_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_6_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_5_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_4_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_3_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_2_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_1_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_0_V_V_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln167_fu_690_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((regslice_both_res_7_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_6_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_5_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_4_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_3_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_2_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_1_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_0_V_V_U_apdone_blk == 1'b1)) & (icmp_ln167_fu_690_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((data_7_V_V_empty_n == 1'b0) | (data_6_V_V_empty_n == 1'b0) | (data_5_V_V_empty_n == 1'b0) | (data_4_V_V_empty_n == 1'b0) | (data_3_V_V_empty_n == 1'b0) | (data_2_V_V_empty_n == 1'b0) | (data_1_V_V_empty_n == 1'b0) | (data_0_V_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3) & (1'd1 == and_ln176_2_fu_785_p2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((data_7_V_V_empty_n == 1'b0) | (data_6_V_V_empty_n == 1'b0) | (data_5_V_V_empty_n == 1'b0) | (data_4_V_V_empty_n == 1'b0) | (data_3_V_V_empty_n == 1'b0) | (data_2_V_V_empty_n == 1'b0) | (data_1_V_V_empty_n == 1'b0) | (data_0_V_V_empty_n == 1'b0)) & (1'd0 == and_ln176_2_fu_785_p2) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln74_fu_791_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln74_fu_791_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b0 == ap_block_state7_io) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b0 == ap_block_state8_io) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_0_V_fu_1000_p2 = (tmpmult_0_V_reg_1264 + tmp_V_15_reg_527);

assign acc_1_V_fu_1005_p2 = (tmpmult_1_V_reg_1269 + tmp_V_16_reg_514);

assign acc_2_V_fu_1010_p2 = (tmpmult_2_V_reg_1274 + tmp_V_17_reg_501);

assign acc_3_V_fu_1015_p2 = (tmpmult_3_V_reg_1279 + tmp_V_18_reg_488);

assign acc_4_V_fu_1020_p2 = (tmpmult_4_V_reg_1284 + tmp_V_19_reg_475);

assign acc_5_V_fu_1025_p2 = (tmpmult_5_V_reg_1289 + tmp_V_20_reg_462);

assign acc_6_V_fu_1030_p2 = (tmpmult_6_V_reg_1294 + tmp_V_21_reg_449);

assign acc_7_V_fu_1035_p2 = (op_V_assign_2_0_7_reg_1299 + tmp_V_22_reg_436);

assign add_ln206_fu_1105_p2 = (pY_loc_0_fu_290 + 32'd1);

assign add_ln208_fu_1117_p2 = (sY_loc_0_fu_294 + 32'd1);

assign add_ln211_fu_1046_p2 = (pX_loc_0_fu_282 + 32'd1);

assign add_ln213_fu_1058_p2 = (sX_loc_0_fu_286 + 32'd1);

assign and_ln176_1_fu_779_p2 = (icmp_ln176_3_fu_767_p2 & icmp_ln176_2_fu_751_p2);

assign and_ln176_2_fu_785_p2 = (and_ln176_fu_773_p2 & and_ln176_1_fu_779_p2);

assign and_ln176_fu_773_p2 = (icmp_ln176_fu_729_p2 & icmp_ln176_1_fu_735_p2);

assign and_ln83_fu_899_p2 = (lshr_ln83_fu_887_p2 & lshr_ln83_1_fu_893_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2 = ((regslice_both_res_7_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_6_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_5_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_4_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_3_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_2_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_1_V_V_U_apdone_blk == 1'b1) | (regslice_both_res_0_V_V_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_block_state3 = ((data_7_V_V_empty_n == 1'b0) | (data_6_V_V_empty_n == 1'b0) | (data_5_V_V_empty_n == 1'b0) | (data_4_V_V_empty_n == 1'b0) | (data_3_V_V_empty_n == 1'b0) | (data_2_V_V_empty_n == 1'b0) | (data_1_V_V_empty_n == 1'b0) | (data_0_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state3_ignore_call13 = ((data_7_V_V_empty_n == 1'b0) | (data_6_V_V_empty_n == 1'b0) | (data_5_V_V_empty_n == 1'b0) | (data_4_V_V_empty_n == 1'b0) | (data_3_V_V_empty_n == 1'b0) | (data_2_V_V_empty_n == 1'b0) | (data_1_V_V_empty_n == 1'b0) | (data_0_V_V_empty_n == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_io = ((res_7_V_V_TREADY_int == 1'b0) | (res_6_V_V_TREADY_int == 1'b0) | (res_5_V_V_TREADY_int == 1'b0) | (res_4_V_V_TREADY_int == 1'b0) | (res_3_V_V_TREADY_int == 1'b0) | (res_2_V_V_TREADY_int == 1'b0) | (res_1_V_V_TREADY_int == 1'b0) | (res_0_V_V_TREADY_int == 1'b0));
end

always @ (*) begin
    ap_block_state8_io = (((res_7_V_V_TREADY_int == 1'b0) & (1'd1 == and_ln176_2_reg_1234)) | ((res_6_V_V_TREADY_int == 1'b0) & (1'd1 == and_ln176_2_reg_1234)) | ((res_5_V_V_TREADY_int == 1'b0) & (1'd1 == and_ln176_2_reg_1234)) | ((res_4_V_V_TREADY_int == 1'b0) & (1'd1 == and_ln176_2_reg_1234)) | ((res_3_V_V_TREADY_int == 1'b0) & (1'd1 == and_ln176_2_reg_1234)) | ((res_2_V_V_TREADY_int == 1'b0) & (1'd1 == and_ln176_2_reg_1234)) | ((res_1_V_V_TREADY_int == 1'b0) & (1'd1 == and_ln176_2_reg_1234)) | ((res_0_V_V_TREADY_int == 1'b0) & (1'd1 == and_ln176_2_reg_1234)));
end

always @ (*) begin
    ap_condition_418 = ((1'b0 == ap_block_state8_io) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln198_fu_1040_p2 == 1'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign call_ret_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_551_data_V_read = {{{{{{{{data_7_V_V_dout}, {data_6_V_V_dout}}, {data_5_V_V_dout}}, {data_4_V_V_dout}}, {data_3_V_V_dout}}, {data_2_V_V_dout}}, {data_1_V_V_dout}}, {data_0_V_V_dout}};

assign empty_28_fu_811_p2 = (tmp_1_fu_803_p3 | 11'd15);

assign i_fu_696_p2 = (i_0_i_reg_425 + 5'd1);

assign icmp_ln167_fu_690_p2 = ((i_0_i_reg_425 == 5'd25) ? 1'b1 : 1'b0);

assign icmp_ln176_1_fu_735_p2 = ((sY_loc_0_fu_294 == 32'd2) ? 1'b1 : 1'b0);

assign icmp_ln176_2_fu_751_p2 = (($signed(tmp_3_fu_741_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln176_3_fu_767_p2 = (($signed(tmp_4_fu_757_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln176_fu_729_p2 = ((sX_loc_0_fu_286 == 32'd2) ? 1'b1 : 1'b0);

assign icmp_ln198_fu_1040_p2 = ((pX_loc_0_fu_282 == 32'd4) ? 1'b1 : 1'b0);

assign icmp_ln202_fu_1099_p2 = ((pY_loc_0_fu_290 == 32'd4) ? 1'b1 : 1'b0);

assign icmp_ln74_fu_791_p2 = ((in_index_reg_540 == 7'd72) ? 1'b1 : 1'b0);

assign icmp_ln83_fu_817_p2 = ((tmp_1_fu_803_p3 > empty_28_fu_811_p2) ? 1'b1 : 1'b0);

assign ir_fu_797_p2 = (in_index_reg_540 + 7'd1);

assign lshr_ln83_1_fu_893_p2 = 1152'd61172327492847069472032393719205726809135813743440799050195397570919697796091958321786863938157971792315844506873509046544459008355036150650333616890210625686064472971480622053109783197015954399612052812141827922088117778074833698589048132156300022844899841969874763871624802603515651998113045708569927237462546233168834543264678118409417047146495 >> zext_ln83_3_fu_883_p1;

assign lshr_ln83_fu_887_p2 = select_ln83_1_fu_858_p3 >> zext_ln83_2_fu_879_p1;

assign op_V_assign_2_0_7_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_632_w_V = tmp_2_fu_985_p4;

assign res_0_V_V_TVALID = regslice_both_res_0_V_V_U_vld_out;

assign res_1_V_V_TVALID = regslice_both_res_1_V_V_U_vld_out;

assign res_2_V_V_TVALID = regslice_both_res_2_V_V_U_vld_out;

assign res_3_V_V_TVALID = regslice_both_res_3_V_V_U_vld_out;

assign res_4_V_V_TVALID = regslice_both_res_4_V_V_U_vld_out;

assign res_5_V_V_TVALID = regslice_both_res_5_V_V_U_vld_out;

assign res_6_V_V_TVALID = regslice_both_res_6_V_V_U_vld_out;

assign res_7_V_V_TVALID = regslice_both_res_7_V_V_U_vld_out;

assign select_ln208_fu_1123_p3 = ((icmp_ln176_1_reg_1229[0:0] === 1'b1) ? 32'd2 : add_ln208_fu_1117_p2);

assign select_ln213_fu_1064_p3 = ((icmp_ln176_reg_1224[0:0] === 1'b1) ? 32'd2 : add_ln213_fu_1058_p2);

assign select_ln83_1_fu_858_p3 = ((icmp_ln83_fu_817_p2[0:0] === 1'b1) ? tmp_10_fu_823_p4 : call_ret_reg_1217);

assign select_ln83_2_fu_865_p3 = ((icmp_ln83_fu_817_p2[0:0] === 1'b1) ? sub_ln83_1_fu_838_p2 : tmp_1_fu_803_p3);

assign select_ln83_fu_850_p3 = ((icmp_ln83_fu_817_p2[0:0] === 1'b1) ? sub_ln83_fu_832_p2 : sub_ln83_2_fu_844_p2);

assign sub_ln83_1_fu_838_p2 = ($signed(11'd1151) - $signed(tmp_1_fu_803_p3));

assign sub_ln83_2_fu_844_p2 = (empty_28_fu_811_p2 - tmp_1_fu_803_p3);

assign sub_ln83_3_fu_873_p2 = ($signed(11'd1151) - $signed(select_ln83_fu_850_p3));

assign sub_ln83_fu_832_p2 = (tmp_1_fu_803_p3 - empty_28_fu_811_p2);

integer ap_tvar_int_0;

always @ (call_ret_reg_1217) begin
    for (ap_tvar_int_0 = 1152 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 1151 - 0) begin
            tmp_10_fu_823_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_10_fu_823_p4[ap_tvar_int_0] = call_ret_reg_1217[1151 - ap_tvar_int_0];
        end
    end
end

assign tmp_1_fu_803_p3 = {{in_index_reg_540}, {4'd0}};

assign tmp_2_fu_985_p4 = {{w2_V_q0[114:112]}};

assign tmp_3_fu_741_p4 = {{pY_loc_0_fu_290[31:1]}};

assign tmp_4_fu_757_p4 = {{pX_loc_0_fu_282[31:1]}};

assign tmpmult_0_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_590_w_V = w2_V_q0[15:0];

assign tmpmult_1_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_596_w_V = {{w2_V_q0[31:16]}};

assign tmpmult_2_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_602_w_V = {{w2_V_q0[47:32]}};

assign tmpmult_3_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_608_w_V = {{w2_V_q0[63:48]}};

assign tmpmult_4_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_614_w_V = {{w2_V_q0[79:64]}};

assign tmpmult_5_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_620_w_V = {{w2_V_q0[95:80]}};

assign tmpmult_6_V_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_626_w_V = {{w2_V_q0[111:96]}};

assign trunc_ln83_fu_905_p1 = and_ln83_fu_899_p2[15:0];

assign w2_V_address0 = zext_ln83_fu_909_p1;

assign zext_ln83_2_fu_879_p1 = select_ln83_2_fu_865_p3;

assign zext_ln83_3_fu_883_p1 = sub_ln83_3_fu_873_p2;

assign zext_ln83_fu_909_p1 = in_index_reg_540;

endmodule //conv_2d_cl_me_ap_fixed_ap_fixed_16_14_5_3_0_config2_s
